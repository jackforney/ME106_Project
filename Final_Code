/*Control 1-axis prototype using joystick x-axis
  Joystick:     |   Servo 1:      |   Gyro:         |   Servo 2:
  5V  -> 5V     |   5V  -> 5V     |   VCC  -> 5V    |   5V -> 5V
  GND -> GND    |   GND -> GND    |   GND -> GND    |   GND -> GND
  VRX -> A1     |   CTL -> D8     |   S1CL-> A5     |   CTL -> D7
                |                 |   S1DA-> A4     |
                |                 |   I1NT-> D2     |

*/

int state;

//Servo Code------------------------------------------------------------------------------------------------------------------
#include <Servo.h> //include servo library

Servo servox;  //create servo obect
Servo servoy;

int posx = 95; //variable for servo position
int posy = 90;

int joystickLHX;
int joystickLHY;
int servox_min = 75;
int servox_max = 105;
int val;    // variable to read the value from the analog pin

//Controller code--------------------------------------------------------------------------------------------------------------
#include <XBOXRECV.h>

// Satisfy the IDE, which needs to see the include statment in the ino too.
#ifdef dobogusinclude
#include <spi4teensy3.h>
#include <SPI.h>
#endif

USB Usb;
XBOXRECV Xbox(&Usb);

//Gyro Code---------------------------------------------------------------------------------------------------------------------
#include "I2Cdev.h"
#include "MPU6050_6Axis_MotionApps20.h"
#include "MPU6050.h"

#if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
#include "Wire.h"
#endif

// class default I2C address is 0x68
// specific I2C addresses may be passed as a parameter here
// AD0 low = 0x68 (default for SparkFun breakout and InvenSense evaluation board)
// AD0 high = 0x69
MPU6050 mpu;

#define OUTPUT_READABLE_YAWPITCHROLL

#define LED_PIN 13 // (Arduino is 13, Teensy is 11, Teensy++ is 6)
bool blinkState = false;

// MPU control/status vars
bool dmpReady = false;  // set true if DMP init was successful
uint8_t mpuIntStatus;   // holds actual interrupt status byte from MPU
uint8_t devStatus;      // return status after each device operation (0 = success, !0 = error)
uint16_t packetSize;    // expected DMP packet size (default is 42 bytes)
uint16_t fifoCount;     // count of all bytes currently in FIFO
uint8_t fifoBuffer[64]; // FIFO storage buffer

// orientation/motion vars
Quaternion q;           // [w, x, y, z]         quaternion container
VectorInt16 aa;         // [x, y, z]            accel sensor measurements
VectorInt16 aaReal;     // [x, y, z]            gravity-free accel sensor measurements
VectorInt16 aaWorld;    // [x, y, z]            world-frame accel sensor measurements
VectorFloat gravity;    // [x, y, z]            gravity vector
float euler[3];         // [psi, theta, phi]    Euler angle container
float ypr[3];           // [yaw, pitch, roll]   yaw/pitch/roll container and gravity vector

// packet structure for InvenSense teapot demo
uint8_t teapotPacket[14] = { '$', 0x02, 0, 0, 0, 0, 0, 0, 0, 0, 0x00, 0x00, '\r', '\n' };


// ================================================================
// ===               INTERRUPT DETECTION ROUTINE                ===
// ================================================================

volatile bool mpuInterrupt = false;     // indicates whether MPU interrupt pin has gone high
void dmpDataReady() {
  mpuInterrupt = true;
}

void setup() {
  //Servo Code------------------------------------------------------------------------------------------------------------
  Serial.begin(115200);

  //Controller code-------------------------------------------------------------------------------------------------------------

  while (!Serial); // Wait for serial port to connect - used on Leonardo, Teensy and other boards with built-in USB CDC serial connection

  if (Usb.Init() == -1) {
    Serial.print(F("\r\nOSC did not start"));
    while (1); //halt
  }
  Serial.print(F("\r\n System Engaged"));// makes sure servos are detached at the beginning of startup just in case control relay was not set off
  servox.attach(8);  // attaches the servo on pin 9 to the servo object
  servoy.attach(7);

  //Gyro Code----------------------------------------------------------------------------------------------------------
  // join I2C bus (I2Cdev library doesn't do this automatically)
#if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
  Wire.begin();
  TWBR = 24; // 400kHz I2C clock (200kHz if CPU is 8MHz)
#elif I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE
  Fastwire::setup(400, true);
#endif

  // initialize serial communication
  while (!Serial); // wait for Leonardo enumeration, others continue immediately

  // initialize device
  Serial.println(F("Initializing I2C devices..."));
  mpu.initialize();

  // verify connection
  Serial.println(F("Testing device connections..."));
  Serial.println(mpu.testConnection() ? F("MPU6050 connection successful") : F("MPU6050 connection failed"));

  // wait for ready
  Serial.println(F("\nSend any character to begin DMP programming and demo: "));
  while (Serial.available() && Serial.read()); // empty buffer
  while (!Serial.available());                 // wait for data
  while (Serial.available() && Serial.read()); // empty buffer again

  // load and configure the DMP
  Serial.println(F("Initializing DMP..."));
  devStatus = mpu.dmpInitialize();

  // supply your own gyro offsets here, scaled for min sensitivity
  mpu.setXGyroOffset(220);
  mpu.setYGyroOffset(76);
  mpu.setZGyroOffset(-85);
  mpu.setZAccelOffset(1788); // 1688 factory default for my test chip

  // make sure it worked (returns 0 if so)
  if (devStatus == 0) {
    // turn on the DMP, now that it's ready
    Serial.println(F("Enabling DMP..."));
    mpu.setDMPEnabled(true);

    // enable Arduino interrupt detection
    Serial.println(F("Enabling interrupt detection (Arduino external interrupt 0)..."));
    attachInterrupt(0, dmpDataReady, RISING);
    mpuIntStatus = mpu.getIntStatus();

    // set our DMP Ready flag so the main loop() function knows it's okay to use it
    Serial.println(F("DMP ready! Waiting for first interrupt..."));
    dmpReady = true;

    // get expected DMP packet size for later comparison
    packetSize = mpu.dmpGetFIFOPacketSize();
  }
  else {
    // ERROR!
    // 1 = initial memory load failed
    // 2 = DMP configuration updates failed
    // (if it's going to break, usually the code will be 1)
    Serial.print(F("DMP Initialization failed (code "));
    Serial.print(devStatus);
    Serial.println(F(")"));
  }

  // configure LED for output
  pinMode(LED_PIN, OUTPUT);

  Serial.println("Starting at 30000");
  for ( int i = 0; i < 30000; i++)
  {
    delay(1);
    Serial.println(i);
  }
}

void loop() {
  //Controller code-----------------------------------------------------------------------------------------------------
  Usb.Task();
  if (Xbox.XboxReceiverConnected) {
    int i = 0;
    if (Xbox.Xbox360Connected[i]) {

      if (Xbox.getButtonClick(XBOX, i)) {
        Xbox.setLedMode(ROTATING, i);
        Serial.print(F("Xbox (Battery: "));
        Serial.print(Xbox.getBatteryLevel(i)); // The battery level in the range 0-3
        Serial.println(F(")"));
      }

      get_state();

      switch (state) {
        case 0:
          controlled_state();
          break;
        case 1:
          sticky_state();
          break;
        case 2:
          scaled_state();
          break;
        case 3:
          gyro_state();
          break;
      }
    }
  }
}

int get_state()
{
  int i = 0;
  if (Xbox.getButtonClick(A, i)) {
    Serial.println(F("A"));
    state = 0;
  }
  if (Xbox.getButtonClick(B, i)) {
    Serial.println(F("B"));
    state = 1;
  }
  if (Xbox.getButtonClick(X, i)) {
    Serial.println(F("X"));
    state = 2;
  }
  if (Xbox.getButtonClick(Y, i)) {
    Serial.println(F("Y"));
    state = 3;
  }
  return state;
}

void controlled_state() {
  //Controller code---------------------------------------------------------------------------------------------------------------

  int xAxis;
  int yAxis;
  int xAxisPos;
  int yAxisPos;

  if (Xbox.XboxReceiverConnected) {
    if (Xbox.Xbox360Connected[0]) {
      Serial.print(F("LeftHatX: "));
      Serial.print(Xbox.getAnalogHat(LeftHatX, 0));
      Serial.print("\t");

      Serial.print(F("LeftHatY: "));
      Serial.print(Xbox.getAnalogHat(LeftHatY, 0));
      Serial.print("\t");

      xAxis = Xbox.getAnalogHat(LeftHatX, 0);
      if ((xAxis > 7500) || (xAxis < -7500)) {
        xAxisPos = map(xAxis, -32768, 32767, 110, 80);
        servox.write(xAxisPos);  // set servo to mapped value
      }
      else {
        servox.write(95);
      }

      yAxis = Xbox.getAnalogHat(LeftHatY, 0);
      if ((yAxis > 7500) || (yAxis < -7500)) {
        yAxisPos = map(yAxis, -32768, 32767, servox_min, servox_max);
        servoy.write(yAxisPos);  // set servo to mapped value
      }
      else {
        servoy.write(90);
      }
      delay(10);
      Serial.println();



      if (Xbox.getButtonClick(XBOX, 0)) {
        Xbox.setLedMode(ROTATING, 0);
        Serial.print(F("Xbox (Battery: "));
        Serial.print(Xbox.getBatteryLevel(0)); // The battery level in the range 0-3
        Serial.println(F(")"));
      }
    }
  }
}

void sticky_state()
{
  //Controller code-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  int xAxis;
  int joystickLHX;
  
  if (Xbox.XboxReceiverConnected) {
    if (Xbox.Xbox360Connected[0]) {
      Serial.print(F("LeftHatX: "));
      Serial.print(Xbox.getAnalogHat(LeftHatX, 0));
      Serial.print("\t");

      joystickLHX = Xbox.getAnalogHat(LeftHatX, 0);
    
      if ((joystickLHX > 6000) && (joystickLHX<20000) && (xAxis<servox_max)) {
        xAxis += 1;
      }

    if ((joystickLHX < -6000) && (joystickLHX>-20000) && (xAxis>servox_min)) {
        xAxis -= 1;
      }
    
    if ((joystickLHX>20000) && (xAxis<servox_max)) {
        xAxis += 2;
      }
    
    if ((joystickLHX<-20000) && (xAxis>servox_min)) {
        xAxis -= 2;
      }
    
    servox.write(xAxis);
      Serial.print(xAxis);
      delay(10);
      Serial.println();

      if (Xbox.getButtonClick(XBOX, 0)) {
        Xbox.setLedMode(ROTATING, 0);
        Serial.print(F("Xbox (Battery: "));
        Serial.print(Xbox.getBatteryLevel(0)); // The battery level in the range 0-3
        Serial.println(F(")"));
      }
    }
  }
}


void scaled_state()
{
  int xAxis;
  int yAxis;
  int xAxisPos;
  int yAxisPos;

  if (Xbox.XboxReceiverConnected) {
    if (Xbox.Xbox360Connected[0]) {
      Serial.print(F("LeftHatX: "));
      Serial.print(Xbox.getAnalogHat(LeftHatX, 0));
      Serial.print("\t");

      Serial.print(F("LeftHatY: "));
      Serial.print(Xbox.getAnalogHat(LeftHatY, 0));
      Serial.print("\t");

      xAxis = Xbox.getAnalogHat(LeftHatX, 0);
      if ((xAxis > 7500) || (xAxis < -7500)) {
        xAxisPos = map(xAxis, -32768, 32767, 100, 90);
        servox.write(xAxisPos);  // set servo to mapped value
      }
      else {
        servox.write(95);
      }

      yAxis = Xbox.getAnalogHat(LeftHatY, 0);
      if ((yAxis > 7500) || (yAxis < -7500)) {
        yAxisPos = map(yAxis, -32768, 32767, 85, 95);
        servoy.write(yAxisPos);  // set servo to mapped value
      }
      else {
        servoy.write(90);
      }

      delay(10);
      Serial.println();

      if (Xbox.getButtonClick(XBOX, 0)) {
        Xbox.setLedMode(ROTATING, 0);
        Serial.print(F("Xbox (Battery: "));
        Serial.print(Xbox.getBatteryLevel(0)); // The battery level in the range 0-3
        Serial.println(F(")"));
      }
    }
  }
}

void gyro_state()
{

  // Gyro Code -------------------------------------------------------------------------------------------------
  // if programming failed, don't try to do anything
  if (!dmpReady) return;

  // wait for MPU interrupt or extra packet(s) available
  while (!mpuInterrupt && fifoCount < packetSize) {
    // other program behavior stuff here
  }

  // reset interrupt flag and get INT_STATUS byte
  mpuInterrupt = false;
  mpuIntStatus = mpu.getIntStatus();

  // get current FIFO count
  fifoCount = mpu.getFIFOCount();

  // check for overflow (this should never happen unless our code is too inefficient)
  if ((mpuIntStatus & 0x10) || fifoCount == 1024) {
    // reset so we can continue cleanly
    mpu.resetFIFO();
    Serial.println(F("FIFO overflow!"));

    // otherwise, check for DMP data ready interrupt (this should happen frequently)
  }
  else if (mpuIntStatus & 0x02) {
    // wait for correct available data length, should be a VERY short wait
    while (fifoCount < packetSize) fifoCount = mpu.getFIFOCount();

    // read a packet from FIFO
    mpu.getFIFOBytes(fifoBuffer, packetSize);

    // track FIFO count here in case there is > 1 packet available
    // (this lets us immediately read more without waiting for an interrupt)
    fifoCount -= packetSize;

#ifdef OUTPUT_READABLE_YAWPITCHROLL
    // display Euler angles in degrees
    mpu.dmpGetQuaternion(&q, fifoBuffer);
    mpu.dmpGetGravity(&gravity, &q);
    mpu.dmpGetYawPitchRoll(ypr, &q, &gravity);
    Serial.print("ypr\t");
    Serial.print(ypr[0] * 180 / M_PI - 84.5);
    Serial.print("\t");
    int p = ypr[1] * 180 / M_PI + 35.5;
    Serial.print(p);
    Serial.print("\t");
    int r = ypr[2] * 180 / M_PI + 3;
    Serial.println(r);
#endif

    // blink LED to indicate activity
    blinkState = !blinkState;
    digitalWrite(LED_PIN, blinkState);
    //Servo Code (Self Leveling)------------------------------------------------------------------------------------
    //Y-Axis
    if ( p < 3 && p > -3) {
      //do nothing
    }
    else {
      if (p <0 ){
      posy--;
      }
      if (p > 0){
        posy++;
      }
      
      if (posy > 130)
      {
        posy = 130;
      }
      if (posy < 60)
      {
        posy = 60;
      }
    servoy.write(posy);
    }

    if (r < 3 && r > -3) {
      //do nothing
    }
    else {
      if (r >0){
      posx++;
      }
      if (r<0){
        posx--;
      }
      if (posx > 130)
      {
        posx = 130;
      }
      if (posx < 60)
      {
        posx = 60;
      }
      
    servox.write(posx);
    }
  }
  //Serial.print(posy);
  //Serial.print("/t");
  //Serial.println(posx);
  
  delay(25);
}
